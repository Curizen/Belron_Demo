<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Carglass Chat UI</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link
      href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet"
    />
    <style>
      @keyframes bounce {
        0%,
        80%,
        100% {
          transform: scale(0);
        }
        40% {
          transform: scale(1);
        }
      }
      .dot {
        display: inline-block;
        font-size: 24px;
        animation: bounce 1.4s infinite;
      }
      .animation-delay-150 {
        animation-delay: 0.15s;
      }
      .animation-delay-300 {
        animation-delay: 0.3s;
      }
    </style>
  </head>
  <body
    class="bg-slate-900 font-[Segoe_UI] flex justify-end items-start min-h-screen m-0 p-6"
  >
  
<elevenlabs-convai agent-id="agent_2901k4hn6hq5e59vhsxzrqz8w256"></elevenlabs-convai><script src="https://unpkg.com/@elevenlabs/convai-widget-embed" async type="text/javascript" style="background-color: red;"></script>    <div
      class="w-[1000px] h-[690px] flex rounded-l-2xl  overflow-hidden shadow-[0_10px_25px_rgba(0,0,0,0.08)] bg-[#ffffff]"
    >
      <!-- Sidebar -->
      <div class="w-[70px] bg-[#2f2f2f] flex flex-col items-center py-5 gap-7">
        <img
          src="https://semanadelseguro.inese.es/2024/wp-content/uploads/2022/12/carglass.png"
          alt="Profile"
          class="w-[50px] h-[50px] rounded-full border-2 border-[#ffffff]"
        />
        <button
          class="text-[22px] text-[#e9ecef] p-2 rounded-lg hover:bg-[#444] hover:scale-110 transition"
        >
          üè†
        </button>
        <button
          class="text-[22px] text-[#e9ecef] p-2 rounded-lg hover:bg-[#444] hover:scale-110 transition"
        >
          üí¨
        </button>
        <button
          class="text-[22px] text-[#e9ecef] p-2 rounded-lg hover:bg-[#444] hover:scale-110 transition"
        >
          üîî
        </button>
        <button
          class="text-[22px] text-[#e9ecef] p-2 rounded-lg hover:bg-[#444] hover:scale-110 transition"
        >
          ‚öôÔ∏è
        </button>
      </div>

      <!-- Left Section (Services) -->
      <div
        class="w-[340px] border-r border-[#dee2e6] p-5 flex flex-col gap-4 bg-[#f8f9fa] overflow-y-auto"
      >
        <div class="flex justify-between items-center mb-3">
          <div>
            <div class="flex w-full justify-between">
              <h2
                id="servicesTitle"
                class="text-stone-700 font-extrabold text-[20px] w-2/3 mb-1 tracking-tight"
              >
                Carglass Services
              </h2>
              <button
                id="langToggle"
                class="px-3 py-1 h-fit rounded bg-gray-300 hover:bg-gray-400 text-sm font-semibold"
              >
                DE
              </button>
            </div>
            <p id="servicesDesc" class="text-gray-500 text-[14px]">
              Choose the service you want to learn more about. Our expert team
              is ready to guide you.
            </p>
          </div>
        </div>

        <div class="flex flex-col gap-3 items-start" id="servicesContainer">
          <button
            class="service-btn w-full text-white border-b border-r border-red-700 rounded-xl py-2 shadow-xl bg-gradient-to-tl from-red-400 to-gray-400 transform transition duration-200 hover:scale-105 hover:shadow-2xl cursor-pointer flex items-center justify-between px-6"
            data-service-en="Windshield Replacement"
            data-service-de="Windschutzscheiben Austausch"
          >
            Windshield Replacement
            <span class="material-icons">chevron_right</span>
          </button>
          <button
            class="service-btn w-full text-white border-b border-r border-red-700 rounded-xl py-2 shadow-xl bg-gradient-to-tl from-red-400 to-gray-400 transform transition duration-200 hover:scale-105 hover:shadow-2xl cursor-pointer flex items-center justify-between px-6"
            data-service-en="Chip Repair"
            data-service-de="Steinschlag Reparatur"
          >
            Chip Repair <span class="material-icons">chevron_right</span>
          </button>
          <button
            class="service-btn w-full text-white border-b border-r border-red-700 rounded-xl py-2 shadow-xl bg-gradient-to-tl from-red-400 to-gray-400 transform transition duration-200 hover:scale-105 hover:shadow-2xl cursor-pointer flex items-center justify-between px-6"
            data-service-en="Rear Glass Replacement"
            data-service-de="Heckscheibe Austausch"
          >
            Rear Glass Replacement
            <span class="material-icons">chevron_right</span>
          </button>
          <button
            class="service-btn w-full text-white border-b border-r border-red-700 rounded-xl py-2 shadow-xl bg-gradient-to-tl from-red-400 to-gray-400 transform transition duration-200 hover:scale-105 hover:shadow-2xl cursor-pointer flex items-center justify-between px-6"
            data-service-en="Side Window Replacement"
            data-service-de="Seitenscheibe Austausch"
          >
            Side Window Replacement
            <span class="material-icons">chevron_right</span>
          </button>
          <button
            class="service-btn w-full text-white border-b border-r border-red-700 rounded-xl py-2 shadow-xl bg-gradient-to-tl from-red-400 to-gray-400 transform transition duration-200 hover:scale-105 hover:shadow-2xl cursor-pointer flex items-center justify-between px-6"
            data-service-en="Window Tinting"
            data-service-de="Fenster T√∂nung"
          >
            Window Tinting <span class="material-icons">chevron_right</span>
          </button>
          <button
            class="service-btn w-full text-white border-b border-r border-red-700 rounded-xl py-2 shadow-xl bg-gradient-to-tl from-red-400 to-gray-400 transform transition duration-200 hover:scale-105 hover:shadow-2xl cursor-pointer flex items-center justify-between px-6"
            data-service-en="Calibration & ADAS Services"
            data-service-de="Kalibrierung & ADAS Services"
          >
            Calibration & ADAS Services
            <span class="material-icons">chevron_right</span>
          </button>
        </div>
        <div>
          <div class="mt-8 hidden">
            <h2 class="text-stone-700 border-b px-2 font-bold mb-4 text-[18px]">
              Select Car Body Type
            </h2>

            <div class="flex flex-col gap-4 max-h-72 overflow-y-auto py-4">
              <!-- Sedan -->
              <label
                class="flex items-center justify-between px-4 py-3 bg-gray-100 rounded-xl shadow hover:bg-gray-200 cursor-pointer transition"
              >
                <div class="flex items-center gap-3">
                  <input
                    type="radio"
                    name="car-body"
                    value="Sedan"
                    class="form-radio text-red-500"
                  />
                  <span class="material-icons text-red-500"
                    >directions_car</span
                  >
                  <span class="font-medium">Sedan</span>
                </div>
                <span class="material-icons text-gray-500">check_circle</span>
              </label>

              <!-- SUV -->
              <label
                class="flex items-center justify-between px-4 py-3 bg-gray-100 rounded-xl shadow hover:bg-gray-200 cursor-pointer transition"
              >
                <div class="flex items-center gap-3">
                  <input
                    type="radio"
                    name="car-body"
                    value="SUV"
                    class="form-radio text-red-500"
                  />
                  <span class="material-icons text-red-500"
                    >airport_shuttle</span
                  >
                  <span class="font-medium">SUV</span>
                </div>
                <span class="material-icons text-gray-500">check_circle</span>
              </label>

              <!-- Hatchback -->
              <label
                class="flex items-center justify-between px-4 py-3 bg-gray-100 rounded-xl shadow hover:bg-gray-200 cursor-pointer transition"
              >
                <div class="flex items-center gap-3">
                  <input
                    type="radio"
                    name="car-body"
                    value="Hatchback"
                    class="form-radio text-red-500"
                  />
                  <span class="material-icons text-red-500"
                    >directions_car_filled</span
                  >
                  <span class="font-medium">Hatchback</span>
                </div>
                <span class="material-icons text-gray-500">check_circle</span>
              </label>

              <!-- Coupe -->
              <label
                class="flex items-center justify-between px-4 py-3 bg-gray-100 rounded-xl shadow hover:bg-gray-200 cursor-pointer transition"
              >
                <div class="flex items-center gap-3">
                  <input
                    type="radio"
                    name="car-body"
                    value="Coupe"
                    class="form-radio text-red-500"
                  />
                  <span class="material-icons text-red-500"
                    >emoji_transportation</span
                  >
                  <span class="font-medium">Coupe</span>
                </div>
                <span class="material-icons text-gray-500">check_circle</span>
              </label>

              <!-- Convertible -->
              <label
                class="flex items-center justify-between px-4 py-3 bg-gray-100 rounded-xl shadow hover:bg-gray-200 cursor-pointer transition"
              >
                <div class="flex items-center gap-3">
                  <input
                    type="radio"
                    name="car-body"
                    value="Convertible"
                    class="form-radio text-red-500"
                  />
                  <span class="material-icons text-red-500">roofing</span>
                  <span class="font-medium">Convertible</span>
                </div>
                <span class="material-icons text-gray-500">check_circle</span>
              </label>

              <!-- Wagon -->
              <label
                class="flex items-center justify-between px-4 py-3 bg-gray-100 rounded-xl shadow hover:bg-gray-200 cursor-pointer transition"
              >
                <div class="flex items-center gap-3">
                  <input
                    type="radio"
                    name="car-body"
                    value="Wagon"
                    class="form-radio text-red-500"
                  />
                  <span class="material-icons text-red-500"
                    >directions_car_filled</span
                  >
                  <span class="font-medium">Wagon</span>
                </div>
                <span class="material-icons text-gray-500">check_circle</span>
              </label>

              <!-- Van -->
              <label
                class="flex items-center justify-between px-4 py-3 bg-gray-100 rounded-xl shadow hover:bg-gray-200 cursor-pointer transition"
              >
                <div class="flex items-center gap-3">
                  <input
                    type="radio"
                    name="car-body"
                    value="Van"
                    class="form-radio text-red-500"
                  />
                  <span class="material-icons text-red-500"
                    >airport_shuttle</span
                  >
                  <span class="font-medium">Van</span>
                </div>
                <span class="material-icons text-gray-500">check_circle</span>
              </label>

              <!-- Truck -->
              <label
                class="flex items-center justify-between px-4 py-3 bg-gray-100 rounded-xl shadow hover:bg-gray-200 cursor-pointer transition"
              >
                <div class="flex items-center gap-3">
                  <input
                    type="radio"
                    name="car-body"
                    value="Truck"
                    class="form-radio text-red-500"
                  />
                  <span class="material-icons text-red-500"
                    >local_shipping</span
                  >
                  <span class="font-medium">Truck</span>
                </div>
                <span class="material-icons text-gray-500">check_circle</span>
              </label>
            </div>
          </div>
          <h2 class="text-stone-700 border-bpx-2 font-bold mb-3 text-[18px]">
            Book Your Appointment
          </h2>
          <div class="flex flex-col gap-2">
            <select
              id="month-select"
              class="w-full p-3 rounded-[10px] border border-[#ccc] bg-[#ffffff] text-stone-600 font-bold text-[14px]"
            ></select>
            <div id="days-grid" class="grid grid-cols-7 gap-[6px] mt-3"></div>
            <div
              class="flex justify-between text-xs mt-2 border border-gray-300 p-2 px-4 rounded-3xl"
            >
              <span class="flex items-center gap-1">
                <span class="bg-red-600 w-[10px] h-[10px] rounded-full"></span
                >Not Available
              </span>
              <span class="flex items-center gap-1">
                <span
                  class="bg-gray-300 w-[10px] h-[10px] rounded-full border border-gray-400"
                ></span
                >Few Slots
              </span>
              <span class="flex items-center gap-1">
                <span
                  class="bg-white w-[10px] h-[10px] rounded-full border border-gray-300"
                ></span
                >Available
              </span>
            </div>
          </div>
        </div>
      </div>

      <!-- Chat Section -->
      <div class="flex-1 flex flex-col bg-[#ffffff]">
        <div
          class="flex justify-between items-center p-4 border-b border-[#dee2e6] bg-[#f8f9fa]"
        >
          <div class="flex items-center gap-2.5">
            <img
              src="https://via.placeholder.com/40"
              alt=""
              class="rounded-full"
            />
            <div>
              <h2 class="text-stone-600 font-bold text-[18px]">
                <span class="text-red-500 text-2xl">Carglass</span> Chatbot
              </h2>
              <div class="flex gap-1.5 items-center">
                <div class="w-2 h-2 rounded-full bg-[#28a745]"></div>
                <span class="text-[11px] text-[#666]">Online</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Chat Box -->
        <div
          id="chatBox"
          class="flex-1 p-5 overflow-y-auto flex flex-col gap-4 bg-[#fdfdfd]"
        >
          <div
            class="bg-[#e9ecef] text-gray-700 px-3.5 py-2.5 rounded-2xl border border-gray-300 max-w-[75%] text-[14px] leading-[1.5] font-semibold shadow-xl relative"
          >
            <div class="absolute -top-4 -left-4">
              <img
                class="w-8 h-auto"
                src="https://cdn-icons-png.flaticon.com/512/8943/8943377.png"
                alt=""
              />
            </div>
            Hello! Welcome to CarGlass. How can I help you today?<br />
            <span class="text-[10px] text-[#777]">10:00 AM</span>
          </div>
        </div>

        <!-- Typing Indicator -->
        <div
          id="typingIndicator"
          class="hidden items-center gap-1.5 px-3.5 py-2.5 max-w-[75%] text-[14px] font-semibold text-gray-700 rounded-2xl border border-gray-300 relative"
        >
          <div class="absolute -top-4 -left-4">
            <img
              class="w-8 h-auto"
              src="https://cdn-icons-png.flaticon.com/512/8943/8943377.png"
              alt=""
            />
          </div>
          <div class="flex gap-1">
            <span class="dot">.</span>
            <span class="dot animation-delay-150">.</span>
            <span class="dot animation-delay-300">.</span>
          </div>
        </div>

        <!-- Input Section -->
        <div
          class="flex items-center p-3.5 border-t border-[#dee2e6] bg-[#f8f9fa] gap-2.5"
        >
          <input
            id="message"
            type="text"
            placeholder="Type your message..."
            class="flex-1 px-3.5 py-2.5 rounded-xl border border-[#ccc] outline-none bg-[#ffffff] text-[#333] text-[14px]"
            autocomplete="off"
            spellcheck="false"
            autocorrect="off"
            autocapitalize="off"
          />
          <button id="attachBtn" class="text-blue-600" type="button">
            <span class="material-icons">attach_file</span>
          </button>
          <button
            id="micBtn"
            class="flex items-center gap-2 px-3 py-2 border border-gray-300 rounded-xl bg-gray-100 hover:bg-gray-200 transition"
          >
            üé§ <span id="micStatus" class="text-sm text-gray-600">Start</span>
          </button>
          <button id="sendBtn" class="text-gray-700" type="button">
            <span class="material-icons">send</span>
          </button>
        </div>
      </div>
    </div>

    <script>
      /* ======= ÿ™ŸÇŸàŸäŸÖ ÿßŸÑÿ£ŸäÿßŸÖ ======= */
      const monthSelect = document.getElementById("month-select");
      const months = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
      ];
      const currentMonth = new Date().getMonth();
      months.forEach((month, index) => {
        const opt = document.createElement("option");
        opt.value = index;
        opt.textContent = month;
        if (index === currentMonth) opt.selected = true;
        monthSelect.appendChild(opt);
      });

      const daysGrid = document.getElementById("days-grid");
      const timesContainer = document.createElement("div");
      timesContainer.className = "flex flex-col gap-4 mt-3";
      daysGrid.after(timesContainer);

      let selectedDate = null;

      function generateDays(monthIndex) {
        daysGrid.innerHTML = "";
        timesContainer.innerHTML = "";
        const today = new Date();
        const year = today.getFullYear();
        const daysInMonth = new Date(year, monthIndex + 1, 0).getDate();

        for (let i = 1; i <= daysInMonth; i++) {
          const day = document.createElement("div");
          day.textContent = i;
          day.className =
            "flex items-center justify-center text-center rounded-lg w-9 h-9 my-auto text-[14px] font-medium transition border border-[#ddd]";

          const currentDate = new Date(year, monthIndex, i);

          if (currentDate < today.setHours(0, 0, 0, 0)) {
            day.classList.add(
              "bg-red-200",
              "text-gray-500",
              "cursor-not-allowed",
              "opacity-50"
            );
            day.title = "Past Date";
          } else {
            const rand = Math.random();
            if (rand < 0.2) {
              day.classList.add(
                "bg-red-600",
                "text-white",
                "cursor-not-allowed"
              );
              day.title = "Not Available";
            } else if (rand < 0.5) {
              day.classList.add(
                "bg-gray-300",
                "text-[#333]",
                "cursor-pointer",
                "hover:bg-gray-400"
              );
              day.title = "Few Slots Available";
            } else {
              day.classList.add(
                "bg-white",
                "text-[#333]",
                "cursor-pointer",
                "hover:bg-gray-100"
              );
              day.title = "Available";
            }
          }

          daysGrid.appendChild(day);
        }
      }

      generateDays(new Date().getMonth());
      monthSelect.addEventListener("change", (e) =>
        generateDays(parseInt(e.target.value))
      );

      /* ======= ÿßŸÑÿ¥ÿßÿ™ ŸàÿßŸÑŸÖŸäŸÉÿ±ŸàŸÅŸàŸÜ ======= */
      let currentLang = "en";
      const chatBox = document.getElementById("chatBox");
      const messageInput = document.getElementById("message");
      const sendBtn = document.getElementById("sendBtn");
      const typingIndicator = document.getElementById("typingIndicator");
      const servicesContainer = document.getElementById("servicesContainer");
      const langToggle = document.getElementById("langToggle");
      const servicesTitle = document.getElementById("servicesTitle");
      const servicesDesc = document.getElementById("servicesDesc");

      const texts = {
        en: {
          title: "Carglass Services",
          desc: "Choose the service you want to learn more about. Our expert team is ready to guide you.",
          langBtn: "DE",
          userPlaceholder: "Type your message...",
        },
        de: {
          title: "Carglass Dienstleistungen",
          desc: "W√§hlen Sie den Service, √ºber den Sie mehr erfahren m√∂chten. Unser Expertenteam steht bereit.",
          langBtn: "EN",
          userPlaceholder: "Ihre Nachricht...",
        },
      };

      function updateLanguageUI() {
        servicesTitle.textContent = texts[currentLang].title;
        servicesDesc.textContent = texts[currentLang].desc;
        langToggle.textContent = texts[currentLang].langBtn;
        messageInput.placeholder = texts[currentLang].userPlaceholder;

        servicesContainer.querySelectorAll(".service-btn").forEach((btn) => {
          btn.childNodes[0].textContent =
            currentLang === "en"
              ? btn.dataset.serviceEn
              : btn.dataset.serviceDe;
        });
      }

      langToggle.addEventListener("click", () => {
        currentLang = currentLang === "en" ? "de" : "en";
        updateLanguageUI();
      });
      function addMessage(data, from = "user") {
        const time = new Date().toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        });
        let messageHTML = "";

        // ÿ™ÿ¨ŸáŸäÿ≤ ÿßŸÑŸÜÿµ ÿßŸÑŸÜŸáÿßÿ¶Ÿä
        let textToShow = "";

        if (typeof data === "string") {
          // ÿßŸÑÿ±ÿØ ŸÜÿµ ÿπÿßÿØŸä
          textToShow = data;
        } else if (typeof data === "object" && data !== null) {
          if (data.output) {
            // ŸÅŸä ÿ≠ÿßŸÑ ŸÉÿßŸÜ ÿßŸÑÿ±ÿØ JSON ŸàŸÅŸäŸá output
            textToShow = data.output;
          } else if (data.start_date && data.end_date) {
            // ŸÅŸä ÿ≠ÿßŸÑ ŸÉÿßŸÜ ÿßŸÑÿ±ÿØ ÿπÿ®ÿßÿ±ÿ© ÿπŸÜ ÿ®ŸäÿßŸÜÿßÿ™ ÿ≠ÿ¨ÿ≤
            const startDate = new Date(data.start_date);
            const endDate = new Date(data.end_date);

            // ÿßŸÑÿ™ÿßÿ±ŸäÿÆ Ÿäÿ∏Ÿáÿ± ŸÖÿ±ÿ© Ÿàÿ≠ÿØÿ©
            const dateLabel = startDate.toLocaleDateString();

            // ÿßŸÑŸàŸÇÿ™ ŸÖŸÜŸÅÿµŸÑ
            const startTime = startDate.toLocaleTimeString([], {
              hour: "2-digit",
              minute: "2-digit",
            });
            const endTime = endDate.toLocaleTimeString([], {
              hour: "2-digit",
              minute: "2-digit",
            });

            textToShow = `
        <div class="flex items-center justify-between gap-2 mb-3">
          <div>
            <span class="text-lg">üìÖ</span>
            <span class="font-semibold text-gray-900">Appointment Details</span>
          </div>
          <div>
            <span class="font-semibold text-gray-900">${dateLabel}</span>
          </div>
        </div>

        <div class="space-y-1 text-sm">
          <p><span class="font-bold text-gray-700">‚è∞ Time:</span> ${startTime} - ${endTime}</p>
          <p><span class="font-bold text-gray-700">üë§ Name:</span> ${data.fullName}</p>
          <p><span class="font-bold text-gray-700">üìû Phone:</span> ${data.contact.phone}</p>
          <p><span class="font-bold text-gray-700">‚úâÔ∏è Email:</span> ${data.contact.email}</p>
          <p><span class="font-bold text-gray-700">üöó Vehicle:</span> ${data.vehicle.make} ${data.vehicle.model} (${data.vehicle.year})</p>
          <p><span class="font-bold text-gray-700">üîß Service:</span> ${data.service}</p>
        </div>
      `;
          } else {
            // fallback
            textToShow = JSON.stringify(data, null, 2);
          }
        }

        if (from === "user") {
          messageHTML = `
      <div class="bg-gradient-to-tl from-red-400 to-gray-400 text-white px-3.5 py-2.5 rounded-2xl border border-gray-300 max-w-[75%] text-[14px] leading-[1.5] ml-auto font-semibold shadow-xl relative">
        ${textToShow}<br>
        <span class="text-[10px] text-[#f5f2ee]">${time}</span>
      </div>`;
        } else {
          messageHTML = `
      <div class="bg-[#e9ecef] text-gray-700 px-3.5 py-2.5 rounded-2xl border border-gray-300 max-w-[75%] text-[14px] leading-[1.5] font-semibold shadow-xl relative">
        <div class="absolute -top-4 -left-4">
          <img class="w-8 h-auto" src="https://cdn-icons-png.flaticon.com/512/8943/8943377.png" alt="">
        </div>
        ${textToShow}
        <br><span class="text-[10px] text-[#777]">${time}</span>
      </div>`;
        }

        chatBox.innerHTML += messageHTML;
        chatBox.scrollTop = chatBox.scrollHeight;
      }

      async function sendMessage() {
        const userMessage = messageInput.value.trim();
        if (!userMessage) return;
        addMessage(userMessage, "user");
        messageInput.value = "";

        typingIndicator.classList.remove("hidden");
        chatBox.appendChild(typingIndicator);
        chatBox.scrollTop = chatBox.scrollHeight;

        try {
          const response = await fetch("/analyze", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ message: userMessage, lang: currentLang }),
          });
          const data = await response.json();
          typingIndicator.classList.add("hidden");
          addMessage(data.reply, "bot");
        } catch (err) {
          typingIndicator.classList.add("hidden");
          addMessage("Error connecting to server.", "bot");
          console.error(err);
        }
      }

      sendBtn.addEventListener("click", sendMessage);
      messageInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter") sendMessage();
      });

      /* ÿÆÿØŸÖÿßÿ™ */
      servicesContainer.querySelectorAll(".service-btn").forEach((button) => {
        button.addEventListener("click", () => {
          const serviceName =
            currentLang === "en"
              ? button.dataset.serviceEn
              : button.dataset.serviceDe;
          const userMessage =
            currentLang === "en"
              ? `I want to know more about ${serviceName}`
              : `Ich m√∂chte mehr √ºber ${serviceName} erfahren`;
          addMessage(userMessage, "user");

          typingIndicator.classList.remove("hidden");
          chatBox.appendChild(typingIndicator);
          chatBox.scrollTop = chatBox.scrollHeight;

          fetch("/message", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ message: userMessage, lang: currentLang }),
          })
            .then((res) => res.json())
            .then((data) => {
              typingIndicator.classList.add("hidden");
              addMessage(data.reply, "bot");
            })
            .catch((err) => {
              typingIndicator.classList.add("hidden");
              addMessage("Error connecting to server.", "bot");
              console.error(err);
            });
        });
      });

      /* ======= ÿ£ŸàŸÇÿßÿ™ ÿßŸÑŸäŸàŸÖ ÿßŸÑÿπÿ¥Ÿàÿßÿ¶Ÿäÿ© ======= */
      function generateTimes() {
        timesContainer.innerHTML = "";
        const possibleTimes = [
          "01:00 PM - 2:15 PM",
          "02:30 PM - 3:45 PM",
          "04:00 PM - 5:15 PM",
          "05:30 PM - 6:45 PM",
          "07:00 PM - 8:15 PM",
        ];

        possibleTimes.forEach((time) => {
          const rand = Math.random();
          let bgClass = "bg-white text-[#333] hover:bg-gray-100 cursor-pointer";
          if (rand < 0.2)
            bgClass = "bg-red-600 text-white cursor-not-allowed opacity-70";
          else if (rand < 0.5)
            bgClass =
              "bg-gray-300 text-[#333] hover:bg-gray-400 cursor-pointer";

          const p = document.createElement("p");
          p.textContent = time;
          p.className = `text-center w-full border-b border-r border-red-700 rounded-xl py-2 shadow-xl 
      transform transition duration-200 hover:scale-105 hover:shadow-2xl flex items-center justify-between px-6 ${bgClass}`;
          if (!p.classList.contains("cursor-not-allowed")) {
            p.addEventListener("click", () => {
              const formattedDate = selectedDate.toLocaleDateString(
                currentLang === "en" ? "en-US" : "de-DE",
                {
                  day: "2-digit",
                  month: "2-digit",
                  year: "numeric",
                }
              );

              const userMessage =
                currentLang === "en"
                  ? `Can I book an appointment on ${formattedDate} at ${time}?`
                  : `Kann ich einen Termin am ${formattedDate} um ${time} buchen?`;

              addMessage(userMessage, "user");

              typingIndicator.classList.remove("hidden");
              chatBox.appendChild(typingIndicator);
              chatBox.scrollTop = chatBox.scrollHeight;

              fetch("/analyze", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  message: userMessage,
                  lang: currentLang,
                }),
              })
                .then((res) => res.json())
                .then((data) => {
                  typingIndicator.classList.add("hidden");
                  addMessage(data.reply, "bot");
                })
                .catch((err) => {
                  typingIndicator.classList.add("hidden");
                  addMessage("Error connecting to server.", "bot");
                  console.error(err);
                });
            });
          }
          timesContainer.appendChild(p);
        });
      }

      /* ======= ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸäŸàŸÖ ======= */
      daysGrid.addEventListener("click", (e) => {
        const dayEl = e.target;
        if (!dayEl.classList.contains("cursor-pointer")) return;

        const day = parseInt(dayEl.textContent);
        const month = parseInt(monthSelect.value);
        const year = new Date().getFullYear();
        selectedDate = new Date(year, month, day);

        generateTimes();
        timesContainer.scrollIntoView({ behavior: "smooth", block: "start" });
      });

      /* ===== ŸÖŸäŸÉÿ±ŸàŸÅŸàŸÜ ===== */
      const micBtn = document.getElementById("micBtn");
const micStatus = document.getElementById("micStatus");

let mediaRecorder = null;
let audioChunks = [];
let isRecording = false;

// ŸÑÿ™ÿπÿ∑ŸäŸÑ ÿ£Ÿä ÿ≠ÿØÿ´ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ™ÿ≥ÿ¨ŸäŸÑ
function disablePageActions() {
  document.addEventListener("keydown", blockKeys, true);
  document.addEventListener("click", blockClicks, true);
}
function enablePageActions() {
  document.removeEventListener("keydown", blockKeys, true);
  document.removeEventListener("click", blockClicks, true);
}
function blockKeys(e) {
  e.stopPropagation();
  e.preventDefault();
}
function blockClicks(e) {
  if (!micBtn.contains(e.target)) { // ÿßŸÑÿ≥ŸÖÿßÿ≠ ŸÅŸÇÿ∑ ÿ®ÿ≤ÿ± ÿßŸÑŸÖÿßŸäŸÉ
    e.stopPropagation();
    e.preventDefault();
  }
}

micBtn.addEventListener("click", async () => {
  if (!isRecording) {
    // ÿ®ÿØÿ° ÿßŸÑÿ™ÿ≥ÿ¨ŸäŸÑ
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorder = new MediaRecorder(stream);
      audioChunks = [];

      mediaRecorder.ondataavailable = (e) => audioChunks.push(e.data);

      mediaRecorder.onstop = async () => {
        const audioBlob = new Blob(audioChunks, { type: "audio/webm" });
        const formData = new FormData();
        formData.append("audio", audioBlob, "voice.webm");

        try {
          const response = await fetch("/voice", {
            method: "POST",
            body: formData,
          });
          const data = await response.json();

          addMessage(data.transcript || "Voice captured", "user");
          addMessage(data.reply, "bot");

          const utterance = new SpeechSynthesisUtterance(data.reply);
          utterance.lang = data.lang || "en-US";
          speechSynthesis.speak(utterance);
        } catch (err) {
          console.error(err);
          addMessage("ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿµŸàÿ™.", "bot");
        }
        enablePageActions();
      };

      mediaRecorder.start();
      micStatus.textContent = "Recording...";
      micBtn.classList.add("bg-red-200", "animate-pulse");
      isRecording = true;
      disablePageActions();
    } catch (err) {
      console.error(err);
      alert("Microphone access denied or unavailable.");
    }
  } else {
    // ÿ•ŸäŸÇÿßŸÅ ÿßŸÑÿ™ÿ≥ÿ¨ŸäŸÑ
    mediaRecorder.stop();
    micStatus.textContent = "Start";
    micBtn.classList.remove("bg-red-200", "animate-pulse");
    isRecording = false;
  }
});

      /* ===== ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑŸÑÿ∫ÿ© ======= */
      updateLanguageUI();
    </script>
  </body>
</html>
