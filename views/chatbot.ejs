<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Carglass Chat UI</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link
      href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />

    <style>
      .triangle-yellow {
        width: 0;
        height: 0;
        border-left: 20px solid transparent; 
        border-bottom: 20px solid #facc15;  
      }

      .triangle-red {
        width: 0;
        height: 0;
        border-left: 25px solid #f11717;
        border-bottom: 20px solid transparent;
      }

      .square-yellow {
        width: 20px;
        height: 20px;
        background-color: #facc15;        
      }

      .square-red {
        width: 20px;
        height: 20px;
        background-color: #f11717;        
      }

      @keyframes bounce {
        0%,
        80%,
        100% {
          transform: scale(0);
        }
        40% {
          transform: scale(1);
        }
      }
      .dot {
        display: inline-block;
        font-size: 24px;
        animation: bounce 1.4s infinite;
      }
      .animation-delay-150 {
        animation-delay: 0.15s;
      }
      .animation-delay-300 {
        animation-delay: 0.3s;
      }
    </style>
  </head>
  <body
    class="bg-slate-900 font-[Segoe_UI] flex justify-end items-start h-[100dvh] w-full m-0 lg:p-4 lg:rounded"
  >
      <div class="flex flex-col lg:flex-row w-full lg:w-[80%] xl:w-[70%] h-full">

        <!-- Left Section (Services) -->
        <div id="sidebar"
          class="w-[95%] md:w-1/2 lg:w-[40%] xl:w-[35%] h-full fixed lg:relative z-[90000] flex 
                transition-transform transform -translate-x-full lg:translate-x-0">
          
          <div class="flex items-center">
            <div class="border p-5 flex flex-col gap-4 bg-[#f8f9fa] overflow-y-auto h-full">
              <div class="hidden lg:flex flex-col">
                <div class="flex items-center gap-0.5">
                  <div class="triangle-yellow"></div>

                  <div class="square-yellow"></div>

                  <div class="square-red"></div>
                  <div class="square-red"></div>

                  <div class="triangle-red"></div>
                </div>
                <p class="font-bold text-[#f11717] text-xl">
                  CARGLASS
                </p>
              </div>
              <div class="flex justify-between items-center mb-3">
                <div>
                  <div class="flex w-full justify-between">
                    <h2
                      id="servicesTitle"
                      class="text-stone-700 font-extrabold text-[20px] w-2/3 mb-1 tracking-tight"
                    >
                      Carglass Services
                    </h2>
                    <button
                      id="langToggle"
                      class="px-3 py-1 h-fit rounded bg-gray-300 hover:bg-gray-400 text-sm font-semibold"
                    >
                      DE
                    </button>
                  </div>
                  <p id="servicesDesc" class="text-gray-500 text-[14px]">
                    Choose the service you want to learn more about. Our expert team
                    is ready to guide you.
                  </p>
                </div>
              </div>

              <div class="flex flex-col gap-3 items-start" id="servicesContainer">
                <button
                  class="service-btn w-full text-white border-b border-r border-red-700 rounded-xl py-2 shadow-xl bg-gradient-to-tl from-red-400 to-gray-400 transform transition duration-200 hover:scale-105 hover:shadow-2xl cursor-pointer flex items-center justify-between px-6"
                  data-service-en="Windshield Replacement"
                  data-service-de="Windschutzscheiben Austausch"
                >
                  Windshield Replacement
                  <span class="material-icons">chevron_right</span>
                </button>
                <button
                  class="service-btn w-full text-white border-b border-r border-red-700 rounded-xl py-2 shadow-xl bg-gradient-to-tl from-red-400 to-gray-400 transform transition duration-200 hover:scale-105 hover:shadow-2xl cursor-pointer flex items-center justify-between px-6"
                  data-service-en="Chip Repair"
                  data-service-de="Steinschlag Reparatur"
                >
                  Chip Repair <span class="material-icons">chevron_right</span>
                </button>
                <button
                  class="service-btn w-full text-white border-b border-r border-red-700 rounded-xl py-2 shadow-xl bg-gradient-to-tl from-red-400 to-gray-400 transform transition duration-200 hover:scale-105 hover:shadow-2xl cursor-pointer flex items-center justify-between px-6"
                  data-service-en="Rear Glass Replacement"
                  data-service-de="Heckscheibe Austausch"
                >
                  Rear Glass Replacement
                  <span class="material-icons">chevron_right</span>
                </button>
                <button
                  class="service-btn w-full text-white border-b border-r border-red-700 rounded-xl py-2 shadow-xl bg-gradient-to-tl from-red-400 to-gray-400 transform transition duration-200 hover:scale-105 hover:shadow-2xl cursor-pointer flex items-center justify-between px-6"
                  data-service-en="Side Window Replacement"
                  data-service-de="Seitenscheibe Austausch"
                >
                  Side Window Replacement
                  <span class="material-icons">chevron_right</span>
                </button>
                <button
                  class="service-btn w-full text-white border-b border-r border-red-700 rounded-xl py-2 shadow-xl bg-gradient-to-tl from-red-400 to-gray-400 transform transition duration-200 hover:scale-105 hover:shadow-2xl cursor-pointer flex items-center justify-between px-6"
                  data-service-en="Window Tinting"
                  data-service-de="Fenster TÃ¶nung"
                >
                  Window Tinting <span class="material-icons">chevron_right</span>
                </button>
                <button
                  class="service-btn w-full text-white border-b border-r border-red-700 rounded-xl py-2 shadow-xl bg-gradient-to-tl from-red-400 to-gray-400 transform transition duration-200 hover:scale-105 hover:shadow-2xl cursor-pointer flex items-center justify-between px-6"
                  data-service-en="Calibration & ADAS Services"
                  data-service-de="Kalibrierung & ADAS Services"
                >
                  Calibration & ADAS Services
                  <span class="material-icons">chevron_right</span>
                </button>
              </div>
              <div>
                <div class="mt-8 hidden">
                  <h2 class="text-stone-700 border-b px-2 font-bold mb-4 text-[18px]">
                    Select Car Body Type
                  </h2>

                  <div class="flex flex-col gap-4 max-h-72 overflow-y-auto py-4">
                    <!-- Sedan -->
                    <label
                      class="flex items-center justify-between px-4 py-3 bg-gray-100 rounded-xl shadow hover:bg-gray-200 cursor-pointer transition"
                    >
                      <div class="flex items-center gap-3">
                        <input
                          type="radio"
                          name="car-body"
                          value="Sedan"
                          class="form-radio text-red-500"
                        />
                        <span class="material-icons text-red-500"
                          >directions_car</span
                        >
                        <span class="font-medium">Sedan</span>
                      </div>
                      <span class="material-icons text-gray-500">check_circle</span>
                    </label>

                    <!-- SUV -->
                    <label
                      class="flex items-center justify-between px-4 py-3 bg-gray-100 rounded-xl shadow hover:bg-gray-200 cursor-pointer transition"
                    >
                      <div class="flex items-center gap-3">
                        <input
                          type="radio"
                          name="car-body"
                          value="SUV"
                          class="form-radio text-red-500"
                        />
                        <span class="material-icons text-red-500"
                          >airport_shuttle</span
                        >
                        <span class="font-medium">SUV</span>
                      </div>
                      <span class="material-icons text-gray-500">check_circle</span>
                    </label>

                    <!-- Hatchback -->
                    <label
                      class="flex items-center justify-between px-4 py-3 bg-gray-100 rounded-xl shadow hover:bg-gray-200 cursor-pointer transition"
                    >
                      <div class="flex items-center gap-3">
                        <input
                          type="radio"
                          name="car-body"
                          value="Hatchback"
                          class="form-radio text-red-500"
                        />
                        <span class="material-icons text-red-500"
                          >directions_car_filled</span
                        >
                        <span class="font-medium">Hatchback</span>
                      </div>
                      <span class="material-icons text-gray-500">check_circle</span>
                    </label>

                    <!-- Coupe -->
                    <label
                      class="flex items-center justify-between px-4 py-3 bg-gray-100 rounded-xl shadow hover:bg-gray-200 cursor-pointer transition"
                    >
                      <div class="flex items-center gap-3">
                        <input
                          type="radio"
                          name="car-body"
                          value="Coupe"
                          class="form-radio text-red-500"
                        />
                        <span class="material-icons text-red-500"
                          >emoji_transportation</span
                        >
                        <span class="font-medium">Coupe</span>
                      </div>
                      <span class="material-icons text-gray-500">check_circle</span>
                    </label>

                    <!-- Convertible -->
                    <label
                      class="flex items-center justify-between px-4 py-3 bg-gray-100 rounded-xl shadow hover:bg-gray-200 cursor-pointer transition"
                    >
                      <div class="flex items-center gap-3">
                        <input
                          type="radio"
                          name="car-body"
                          value="Convertible"
                          class="form-radio text-red-500"
                        />
                        <span class="material-icons text-red-500">roofing</span>
                        <span class="font-medium">Convertible</span>
                      </div>
                      <span class="material-icons text-gray-500">check_circle</span>
                    </label>

                    <!-- Wagon -->
                    <label
                      class="flex items-center justify-between px-4 py-3 bg-gray-100 rounded-xl shadow hover:bg-gray-200 cursor-pointer transition"
                    >
                      <div class="flex items-center gap-3">
                        <input
                          type="radio"
                          name="car-body"
                          value="Wagon"
                          class="form-radio text-red-500"
                        />
                        <span class="material-icons text-red-500"
                          >directions_car_filled</span
                        >
                        <span class="font-medium">Wagon</span>
                      </div>
                      <span class="material-icons text-gray-500">check_circle</span>
                    </label>

                    <!-- Van -->
                    <label
                      class="flex items-center justify-between px-4 py-3 bg-gray-100 rounded-xl shadow hover:bg-gray-200 cursor-pointer transition"
                    >
                      <div class="flex items-center gap-3">
                        <input
                          type="radio"
                          name="car-body"
                          value="Van"
                          class="form-radio text-red-500"
                        />
                        <span class="material-icons text-red-500"
                          >airport_shuttle</span
                        >
                        <span class="font-medium">Van</span>
                      </div>
                      <span class="material-icons text-gray-500">check_circle</span>
                    </label>

                    <!-- Truck -->
                    <label
                      class="flex items-center justify-between px-4 py-3 bg-gray-100 rounded-xl shadow hover:bg-gray-200 cursor-pointer transition"
                    >
                      <div class="flex items-center gap-3">
                        <input
                          type="radio"
                          name="car-body"
                          value="Truck"
                          class="form-radio text-red-500"
                        />
                        <span class="material-icons text-red-500"
                          >local_shipping</span
                        >
                        <span class="font-medium">Truck</span>
                      </div>
                      <span class="material-icons text-gray-500">check_circle</span>
                    </label>
                  </div>
                </div>
                <h2 class="text-stone-700 border-bpx-2 font-bold mb-3 text-[18px]">
                  Book Your Appointment
                </h2>
                <div class="flex flex-col gap-2">
                  <select
                    id="month-select"
                    class="w-full p-3 rounded-[10px] border border-[#ccc] bg-[#ffffff] text-stone-600 font-bold text-[14px]"
                  ></select>
                  <div id="days-grid" class="grid grid-cols-7 gap-[6px] mt-3"></div>
                  <div
                    class="flex justify-between text-xs mt-2 border border-gray-300 p-2 px-4 rounded-3xl"
                  >
                    <span class="flex items-center gap-1">
                      <span class="bg-red-600 w-[10px] h-[10px] rounded-full"></span
                      >Not Available
                    </span>
                    <span class="flex items-center gap-1">
                      <span
                        class="bg-gray-300 w-[10px] h-[10px] rounded-full border border-gray-400"
                      ></span
                      >Few Slots
                    </span>
                    <span class="flex items-center gap-1">
                      <span
                        class="bg-white w-[10px] h-[10px] rounded-full border border-gray-300"
                      ></span
                      >Available 
                    </span>
                  </div>
                </div>
              </div>
            </div>
            <div class="lg:hidden">
                <button id="closeSidebar" 
                  class="h-32 w-fit px-0.5 flex items-center justify-center 
                        bg-gradient-to-b from-gray-800 via-red-500 to-gray-800 
                        rounded-r-2xl border-r border-gray-800 shadow-lg 
                        hover:from-red-500 hover:via-red-400 hover:to-gray-300
                        hover:shadow-xl hover:scale-105
                        transition-all duration-300 ease-in-out">
                  <i class="fas fa-caret-left text-xl text-white"></i>
                </button>
            </div>
          </div>
        </div>

        <!-- Chat Section -->
        <div class="flex-1 flex flex-col bg-[#ffffff] h-full border border-gray-300 w-full lg:w-2/3">
          
        <div class="w-full p-4">
          <div class="flex flex-col">
              <div class="flex items-center gap-0.5">
                <div class="triangle-yellow"></div>

                <div class="square-yellow"></div>

                <div class="square-red"></div>
                <div class="square-red"></div>

                <div class="triangle-red"></div>
              </div>
              <p class="font-bold text-[#f11717] text-xl">
                CARGLASS
              </p>
            </div>

            <div class="fixed lg:hidden top-1/2 -translate-y-1/2 -left-0 z-[90]">
              <button id="openSidebar" 
                class="h-32 w-fit pr-1 flex items-center justify-center 
                        bg-gradient-to-b from-gray-800 via-red-500 to-gray-800 
                        rounded-r-2xl border-r border-gray-800 shadow-lg 
                        hover:from-red-500 hover:via-red-400 hover:to-gray-300
                        hover:shadow-xl hover:scale-105
                        transition-all duration-300 ease-in-out">
                <i class="fas fa-caret-right text-white text-xl"></i>
              </button>

            </div>
          </div>
          <div
            class="flex justify-between items-center p-2 border-b border-[#dee2e6] bg-[#f8f9fa]"
          >
            <div class="flex items-center justify-between w-full gap-2.5">
              <div class="pl-4">
                <h2 class="text-stone-600 font-bold text-[18px]">
                  Chatbot
                </h2>
                <div class="flex gap-1.5 items-center">
                  <div class="w-2 h-2 rounded-full bg-[#28a745]"></div>
                  <span class="text-[11px] text-[#666]">Online</span>
                </div>
              </div>
              <div>
              <button id="newChatBtn"
                class="flex text-gray-400 text-xl p-2">
                  <i class="fa-solid fa-pen-to-square"></i>
              </button>

              </div>
            </div>
            <div  class="relative">
              <elevenlabs-convai class="fixed -top-6 lg:-top-2 -right-4 md:right-0" agent-id="agent_2901k4hn6hq5e59vhsxzrqz8w256"></elevenlabs-convai><script src="https://unpkg.com/@elevenlabs/convai-widget-embed" async type="text/javascript" style="background-color: red;"></script>
            </div>
          </div>

          <!-- Chat Box -->
          <div
            id="chatBox"
            class="flex-1 p-5 pl-8 overflow-y-auto flex flex-col gap-4 bg-[#fdfdfd]"
          >
          </div>

          <!-- Typing Indicator -->
          <div
            id="typingIndicator"
            class="hidden items-center gap-1.5 px-3.5 py-2.5 max-w-[75%] text-[14px] font-semibold text-gray-700 rounded-2xl border border-gray-300 relative"
          >
            <div class="absolute -top-4 -left-4">
              <img
                class="w-8 h-auto"
                src="https://cdn-icons-png.flaticon.com/512/8943/8943377.png"
                alt=""
              />
            </div>
            <div class="flex gap-1">
              <span class="dot">.</span>
              <span class="dot animation-delay-150">.</span>
              <span class="dot animation-delay-300">.</span>
            </div>
          </div>

          <!-- Input Section -->
          <div
            class="flex items-center p-3.5 border-t border-[#dee2e6] bg-[#f8f9fa] gap-2.5"
          >
            <input
              id="message"
              type="text"
              placeholder="Type your message..."
              class="flex-1 px-3.5 py-2.5 rounded-xl border border-[#ccc] outline-none bg-[#ffffff] text-[#333] text-[14px]"
              autocomplete="off"
              spellcheck="false"
              autocorrect="off"
              autocapitalize="off"
            />
          <button
                id="micBtn"
                class="flex items-center gap-2 px-3 py-2 border border-gray-300 rounded-xl bg-gray-100 hover:bg-gray-200 transition"
              >
            ð¤ <span id="micStatus" class="text-sm text-gray-600">Start</span>
          </button>
            <button id="sendBtn" class="text-gray-700" type="button">
              <span class="material-icons">send</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <script>
      // open and close sidebar
      const sidebar = document.getElementById("sidebar");
      const openBtn = document.getElementById("openSidebar");
      const closeBtn = document.getElementById("closeSidebar");

      openBtn.addEventListener("click", () => {
        sidebar.classList.remove("-translate-x-full");
      });

      closeBtn.addEventListener("click", () => {
        sidebar.classList.add("-translate-x-full");
      });
      /* ======= ØªÙÙÙÙ Ø§ÙØ£ÙØ§Ù ======= */
      const monthSelect = document.getElementById("month-select");
      const months = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
      ];
      const currentMonth = new Date().getMonth();
      months.forEach((month, index) => {
        const opt = document.createElement("option");
        opt.value = index;
        opt.textContent = month;
        if (index === currentMonth) opt.selected = true;
        monthSelect.appendChild(opt);
      });

      const daysGrid = document.getElementById("days-grid");
      const timesContainer = document.createElement("div");
      timesContainer.className = "flex flex-col gap-4 mt-3";
      daysGrid.after(timesContainer);

      let selectedDate = null;

      function generateDays(monthIndex) {
        daysGrid.innerHTML = "";
        timesContainer.innerHTML = "";
        const today = new Date();
        const year = today.getFullYear();
        const daysInMonth = new Date(year, monthIndex + 1, 0).getDate();

        for (let i = 1; i <= daysInMonth; i++) {
          const day = document.createElement("div");
          day.textContent = i;
          day.className =
            "flex items-center justify-center text-center rounded-lg w-9 h-9 my-auto text-[14px] font-medium transition border border-[#ddd]";

          const currentDate = new Date(year, monthIndex, i);

          if (currentDate < today.setHours(0, 0, 0, 0)) {
            day.classList.add(
              "bg-red-200",
              "text-gray-500",
              "cursor-not-allowed",
              "opacity-50"
            );
            day.title = "Past Date";
          } else {
            const rand = Math.random();
            if (rand < 0.2) {
              day.classList.add(
                "bg-red-600",
                "text-white",
                "cursor-not-allowed"
              );
              day.title = "Not Available";
            } else if (rand < 0.5) {
              day.classList.add(
                "bg-gray-300",
                "text-[#333]",
                "cursor-pointer",
                "hover:bg-gray-400"
              );
              day.title = "Few Slots Available";
            } else {
              day.classList.add(
                "bg-white",
                "text-[#333]",
                "cursor-pointer",
                "hover:bg-gray-100"
              );
              day.title = "Available";
            }
          }

          daysGrid.appendChild(day);
        }
      }

      generateDays(new Date().getMonth());
      monthSelect.addEventListener("change", (e) =>
        generateDays(parseInt(e.target.value))
      );

      /* ======= Ø§ÙØ´Ø§Øª ÙØ§ÙÙÙÙØ±ÙÙÙÙ ======= */
      let currentLang = "en";
      const chatBox = document.getElementById("chatBox");
      const messageInput = document.getElementById("message");
      const sendBtn = document.getElementById("sendBtn");
      const typingIndicator = document.getElementById("typingIndicator");
      const servicesContainer = document.getElementById("servicesContainer");
      const langToggle = document.getElementById("langToggle");
      const servicesTitle = document.getElementById("servicesTitle");
      const servicesDesc = document.getElementById("servicesDesc");

      const texts = {
        en: {
          title: "Carglass Services",
          desc: "Choose the service you want to learn more about. Our expert team is ready to guide you.",
          langBtn: "DE",
          userPlaceholder: "Type your message...",
        },
        de: {
          title: "Carglass Dienstleistungen",
          desc: "WÃ¤hlen Sie den Service, Ã¼ber den Sie mehr erfahren mÃ¶chten. Unser Expertenteam steht bereit.",
          langBtn: "EN",
          userPlaceholder: "Ihre Nachricht...",
        },
      };

      function updateLanguageUI() {
        servicesTitle.textContent = texts[currentLang].title;
        servicesDesc.textContent = texts[currentLang].desc;
        langToggle.textContent = texts[currentLang].langBtn;
        messageInput.placeholder = texts[currentLang].userPlaceholder;

        servicesContainer.querySelectorAll(".service-btn").forEach((btn) => {
          btn.childNodes[0].textContent =
            currentLang === "en"
              ? btn.dataset.serviceEn
              : btn.dataset.serviceDe;
        });
      }

      langToggle.addEventListener("click", () => {
        currentLang = currentLang === "en" ? "de" : "en";
        updateLanguageUI();
      });

      /*=========== welcome message =========== */
      function createWelcomeMessage() {
        const chatBox = document.getElementById("chatBox");

        if (chatBox.children.length === 0) {

          const messageDiv = document.createElement("div");
          messageDiv.className = "bg-[#e9ecef] text-gray-700 px-3.5 py-2.5 rounded-2xl border border-gray-300 max-w-[75%] text-[14px] leading-[1.5] font-semibold shadow-xl relative";

          const iconDiv = document.createElement("div");
          iconDiv.className = "absolute -top-4 -left-4";

          const iconImg = document.createElement("img");
          iconImg.className = "w-8 h-auto";
          iconImg.src = "https://cdn-icons-png.flaticon.com/512/8943/8943377.png"; // Ø£ÙÙÙÙØ© Ø«Ø§Ø¨ØªØ©
          iconImg.alt = "icon";

          iconDiv.appendChild(iconImg);
          messageDiv.appendChild(iconDiv);

          const messageText = "Hello! Welcome to CarGlass. How can I help you today?";
          messageDiv.innerHTML += messageText + "<br />";

          const now = new Date();
          const hours = now.getHours().toString().padStart(2, "0");
          const minutes = now.getMinutes().toString().padStart(2, "0");
          const timeSpan = document.createElement("span");
          timeSpan.className = "text-[10px] text-[#777]";
          timeSpan.innerText = `${hours}:${minutes}`;

          messageDiv.appendChild(timeSpan);

          chatBox.appendChild(messageDiv);
        }
      }

      createWelcomeMessage();


      /* ========== delete chat ========== */
    const newChatBtn = document.getElementById("newChatBtn");

    newChatBtn.addEventListener("click", () => {
      localStorage.removeItem(CHAT_KEY);

      const chatBox = document.getElementById("chatBox");
      if (chatBox) {
        chatBox.innerHTML = "";
      }
        createWelcomeMessage();
      console.log("Chat storage fully cleared. No messages remain.");
    });



      /* ===== Conversation Storage with 12h Expiry ===== */
      const CHAT_KEY = "chat_history"; // full conversation (all pairs)
      const EXPIRY_HOURS = 12;
      const TTL_MS = EXPIRY_HOURS * 60 * 60 * 1000;

      function nowMs() {
        return Date.now();
      }
      function isFresh(ts) {
        return nowMs() - ts < TTL_MS;
      }

      function getFullConversation() {
        const raw = localStorage.getItem(CHAT_KEY);
        if (!raw) return [];
        let list;
        try {
          list = JSON.parse(raw) || [];
        } catch {
          return [];
        }
        const fresh = list.filter((item) => isFresh(item.timestamp));
        if (fresh.length !== list.length) {
          localStorage.setItem(CHAT_KEY, JSON.stringify(fresh)); // cleanup
        }
        return fresh;
      }

      function saveFullConversation(list) {
        localStorage.setItem(CHAT_KEY, JSON.stringify(list));
      }

      function addConversationPair(userMessage, botReply) {
        const full = getFullConversation();
        full.push({ user: userMessage, bot: botReply, timestamp: nowMs() });
        saveFullConversation(full); // keep ALL fresh pairs (not limited to 5)
      }

      function getLastPairs(n = 5) {
        // returns only {user, bot} for backend (no timestamps)
        const full = getFullConversation();
        return full.slice(-n).map(({ user, bot }) => ({ user, bot }));
      }

      function restoreChatUI() {
        const full = getFullConversation();
        full.forEach((pair) => {
          addMessage(pair.user, "user");
          addMessage(pair.bot, "bot");
        });
      }

      // Optional: periodic cleanup tick (keeps storage tidy if page stays open)
      setInterval(() => {
        getFullConversation();
      }, 60 * 1000);

      /* ====== Chat Rendering ====== */
      function addMessage(data, from = "user") {
        const time = new Date().toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        });
        let messageHTML = "";
        let textToShow = "";

        if (typeof data === "string") {
          textToShow = data;
        } else if (typeof data === "object" && data !== null) {
          if (data.output) {
            textToShow = data.output;
          } else if (data.start_date && data.end_date) {
            const startDate = new Date(data.start_date);
            const endDate = new Date(data.end_date);
            const dateLabel = startDate.toLocaleDateString();
            const startTime = startDate.toLocaleTimeString([], {
              hour: "2-digit",
              minute: "2-digit",
            });
            const endTime = endDate.toLocaleTimeString([], {
              hour: "2-digit",
              minute: "2-digit",
            });
            textToShow = `
          <div class="flex items-center justify-between gap-2 mb-3">
            <div><span class="text-lg">ð</span>
              <span class="font-semibold text-gray-900">Appointment Details</span>
            </div>
            <div><span class="font-semibold text-gray-900">${dateLabel}</span></div>
          </div>
          <div class="space-y-1 text-sm">
            <p><span class="font-bold text-gray-700">â° Time:</span> ${startTime} - ${endTime}</p>
            <p><span class="font-bold text-gray-700">ð¤ Name:</span> ${data.fullName}</p>
            <p><span class="font-bold text-gray-700">ð Phone:</span> ${data.contact.phone}</p>
            <p><span class="font-bold text-gray-700">âï¸ Email:</span> ${data.contact.email}</p>
            <p><span class="font-bold text-gray-700">ð Vehicle:</span> ${data.vehicle.make} ${data.vehicle.model} (${data.vehicle.year})</p>
            <p><span class="font-bold text-gray-700">ð§ Service:</span> ${data.service}</p>
          </div>`;
          } else {
            textToShow = JSON.stringify(data, null, 2);
          }
        }

        if (from === "user") {
          messageHTML = `
        <div class="bg-gradient-to-tl from-red-400 to-gray-400 text-white px-3.5 py-2.5 rounded-2xl border border-gray-300 max-w-[75%] text-[14px] leading-[1.5] ml-auto font-semibold shadow-xl relative">
          ${textToShow}<br>
          <span class="text-[10px] text-[#f5f2ee]">${time}</span>
        </div>`;
        } else {
          messageHTML = `
        <div class="bg-[#e9ecef] text-gray-700 px-3.5 py-2.5 rounded-2xl border border-gray-300 max-w-[75%] text-[14px] leading-[1.5] font-semibold shadow-xl relative">
          <div class="absolute -top-4 -left-4">
            <img class="w-8 h-auto" src="https://cdn-icons-png.flaticon.com/512/8943/8943377.png" alt="">
          </div>
          ${textToShow}
          <br><span class="text-[10px] text-[#777]">${time}</span>
        </div>`;
        }

        chatBox.innerHTML += messageHTML;
        chatBox.scrollTop = chatBox.scrollHeight;
      }

      /* ===== Sending Messages ===== */
      async function sendMessage() {
        const userMessage = messageInput.value.trim();
        if (!userMessage) return;
        addMessage(userMessage, "user");
        messageInput.value = "";

        typingIndicator.classList.remove("hidden");
        chatBox.appendChild(typingIndicator);
        chatBox.scrollTop = chatBox.scrollHeight;

        try {
          const historyForBackend = getLastPairs(5); // â¬ï¸ only last 5
          const response = await fetch("/analyze", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              message: userMessage,
              lang: currentLang,
              history: historyForBackend,
            }),
          });
          const data = await response.json();
          typingIndicator.classList.add("hidden");
          addMessage(data.reply, "bot");
          addConversationPair(userMessage, data.reply); // store full convo (with timestamp)
        } catch (err) {
          typingIndicator.classList.add("hidden");
          addMessage("Error connecting to server.", "bot");
          console.error(err);
        }
      }

      sendBtn.addEventListener("click", sendMessage);
      messageInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter") sendMessage();
      });

      /* ===== services ===== */
      servicesContainer.querySelectorAll(".service-btn").forEach((button) => {
        button.addEventListener("click", () => {
          const serviceName =
            currentLang === "en"
              ? button.dataset.serviceEn
              : button.dataset.serviceDe;
          const userMessage =
            currentLang === "en"
              ? `I want to know more about ${serviceName}`
              : `Ich mÃ¶chte mehr Ã¼ber ${serviceName} erfahren`;
          addMessage(userMessage, "user");

          typingIndicator.classList.remove("hidden");
          chatBox.appendChild(typingIndicator);
          chatBox.scrollTop = chatBox.scrollHeight;

          sidebar.classList.add("-translate-x-full");
          const historyForBackend = getLastPairs(5); 
          fetch("/analyze", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              message: userMessage,
              lang: currentLang,
              history: historyForBackend,
            }),
          })
            .then((res) => res.json())
            .then((data) => {
              typingIndicator.classList.add("hidden");
              addMessage(data.reply, "bot");
              addConversationPair(userMessage, data.reply);
            })
            .catch((err) => {
              typingIndicator.classList.add("hidden");
              addMessage("Error connecting to server.", "bot");
              console.error(err);
            });
        });
      });

      /* =====Days and time ======= */
      function generateTimes() {
        timesContainer.innerHTML = "";
        const possibleTimes = [
          "01:00 PM - 2:15 PM",
          "02:30 PM - 3:45 PM",
          "04:00 PM - 5:15 PM",
          "05:30 PM - 6:45 PM",
          "07:00 PM - 8:15 PM",
        ];

        possibleTimes.forEach((time) => {
          const rand = Math.random();
          let bgClass = "bg-white text-[#333] hover:bg-gray-100 cursor-pointer";
          if (rand < 0.2)
            bgClass = "bg-red-600 text-white cursor-not-allowed opacity-70";
          else if (rand < 0.5)
            bgClass =
              "bg-gray-300 text-[#333] hover:bg-gray-400 cursor-pointer";

          const p = document.createElement("p");
          p.textContent = time;
          p.className = `text-center w-full border-b border-r border-red-700 rounded-xl py-2 shadow-xl transform transition duration-200 hover:scale-105 hover:shadow-2xl flex items-center justify-between px-6 ${bgClass}`;
          if (!p.classList.contains("cursor-not-allowed")) {
            p.addEventListener("click", () => {
              const formattedDate = selectedDate.toLocaleDateString(
                currentLang === "en" ? "en-US" : "de-DE",
                {
                  day: "2-digit",
                  month: "2-digit",
                  year: "numeric",
                }
              );

              const userMessage =
                currentLang === "en"
                  ? `Can I book an appointment on ${formattedDate} at ${time}?`
                  : `Kann ich einen Termin am ${formattedDate} um ${time} buchen?`;

              addMessage(userMessage, "user");

              typingIndicator.classList.remove("hidden");
              chatBox.appendChild(typingIndicator);
              chatBox.scrollTop = chatBox.scrollHeight;

              sidebar.classList.add("-translate-x-full");
              const historyForBackend = getLastPairs(5); // â¬ï¸ only last 5
              fetch("/analyze", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  message: userMessage,
                  lang: currentLang,
                  history: historyForBackend,
                }),
              })
                .then((res) => res.json())
                .then((data) => {
                  typingIndicator.classList.add("hidden");
                  addMessage(data.reply, "bot");
                  addConversationPair(userMessage, data.reply);
                })
                .catch((err) => {
                  typingIndicator.classList.add("hidden");
                  addMessage("Error connecting to server.", "bot");
                  console.error(err);
                });
            });
          }
          timesContainer.appendChild(p);
        });
      }

      /* ======= Ø§Ø®ØªÙØ§Ø± Ø§ÙÙÙÙ ======= */
      daysGrid.addEventListener("click", (e) => {
        const dayEl = e.target;
        if (!dayEl.classList.contains("cursor-pointer")) return;

        const day = parseInt(dayEl.textContent);
        const month = parseInt(monthSelect.value);
        const year = new Date().getFullYear();
        selectedDate = new Date(year, month, day);

        generateTimes();
        timesContainer.scrollIntoView({ behavior: "smooth", block: "start" });
      });

      /* ===== ÙÙÙØ±ÙÙÙÙ ===== */
      const micBtn = document.getElementById("micBtn");
      const micStatus = document.getElementById("micStatus");

      let mediaRecorder = null;
      let audioChunks = [];
      let isRecording = false;

      function disablePageActions() {
        document.addEventListener("keydown", blockKeys, true);
        document.addEventListener("click", blockClicks, true);
      }
      function enablePageActions() {
        document.removeEventListener("keydown", blockKeys, true);
        document.removeEventListener("click", blockClicks, true);
      }
      function blockKeys(e) {
        e.stopPropagation();
        e.preventDefault();
      }
      function blockClicks(e) {
        if (!micBtn.contains(e.target)) {
          e.stopPropagation();
          e.preventDefault();
        }
      }

      micBtn.addEventListener("click", async () => {
        if (!isRecording) {
          try {
            const stream = await navigator.mediaDevices.getUserMedia({
              audio: true,
            });
            mediaRecorder = new MediaRecorder(stream);
            audioChunks = [];

            mediaRecorder.ondataavailable = (e) => audioChunks.push(e.data);

            mediaRecorder.onstop = async () => {
              const audioBlob = new Blob(audioChunks, { type: "audio/webm" });
              const formData = new FormData();
              formData.append("audio", audioBlob, "voice.webm");

              try {
                const response = await fetch("/voice", {
                  method: "POST",
                  body: formData,
                });
                const data = await response.json();

                addMessage(data.transcript || "Voice captured", "user");
                addMessage(data.reply, "bot");
                addConversationPair(data.transcript || "", data.reply);

                const utterance = new SpeechSynthesisUtterance(data.reply);
                utterance.lang = data.lang || "en-US";
                speechSynthesis.speak(utterance);
              } catch (err) {
                console.error(err);
                addMessage("Ø­Ø¯Ø« Ø®Ø·Ø£ Ø£Ø«ÙØ§Ø¡ ÙØ¹Ø§ÙØ¬Ø© Ø§ÙØµÙØª.", "bot");
              }
              enablePageActions();
            };

            mediaRecorder.start();
            micStatus.textContent = "Recording...";
            micBtn.classList.add("bg-red-200", "animate-pulse");
            isRecording = true;
            disablePageActions();
          } catch (err) {
            console.error(err);
            alert("Microphone access denied or unavailable.");
          }
        } else {
          mediaRecorder.stop();
          micStatus.textContent = "Start";
          micBtn.classList.remove("bg-red-200", "animate-pulse");
          isRecording = false;
        }
      });

      /* ===== ØªÙÙØ¦Ø© Ø§ÙÙØºØ© + Restore Chat ======= */
      updateLanguageUI();
      restoreChatUI(); // â¬ï¸ bring full (fresh) conversation back on reload
    </script>
  </body>
</html>
